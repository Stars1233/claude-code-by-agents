name: Release

on:
  push:
    tags:
      - "*"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
            artifact_pattern: "*.AppImage"
          - os: macos-latest
            platform: mac
            arch: universal
            artifact_pattern: "*.dmg"
          - os: windows-latest
            platform: win
            arch: x64
            artifact_pattern: "Agentrooms Setup *.exe"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Install dependencies
        run: npm install

      - name: Install frontend dependencies
        run: npm ci
        working-directory: frontend

      - name: Install backend dependencies
        run: npm ci
        working-directory: backend

      - name: Build frontend
        run: npm run build:frontend

      - name: Rebuild native dependencies
        run: npm rebuild

      - name: Install Python setuptools (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-setuptools
      
      - name: Setup Python (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Build Electron app
        run: npm run dist:${{ matrix.platform }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_IDENTITY_AUTO_DISCOVERY: false

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: agentrooms-${{ matrix.platform }}-${{ matrix.arch }}
          path: dist/${{ matrix.artifact_pattern }}

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: npm ci
        working-directory: frontend

      - name: Install Playwright browsers
        run: npx playwright install chromium
        working-directory: frontend

      - name: Start development server
        run: |
          cd frontend
          npm run dev &
          # Wait for server to be ready
          timeout 60 bash -c 'until curl -s http://localhost:3000 > /dev/null; do sleep 1; done'
        continue-on-error: false

      - name: Record demo videos
        run: |
          cd frontend
          npm run record-demo codeGeneration -- --theme=both
        continue-on-error: true

      - name: Stop development server
        run: |
          # Kill any remaining dev server processes
          pkill -f "vite" || true
        continue-on-error: true

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/*/*
            frontend/demo-recordings/*.webm
          generate_release_notes: true
          draft: false
          prerelease: false

  npm-publish:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          registry-url: "https://registry.npmjs.org"
          cache: "npm"
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        run: npm ci
        working-directory: backend

      - name: Build frontend
        run: |
          cd frontend
          npm ci
          npm run build

      - name: Build npm package
        run: npm run build
        working-directory: backend

      - name: Test npm package
        run: |
          npm run test
          # Test global installation
          npm pack
          PACKAGE_FILE=$(ls *.tgz)
          npm install -g "./$PACKAGE_FILE"
          # Test CLI functionality
          agentrooms --version
        working-directory: backend

      - name: Publish to npm (dry-run)
        run: npm publish --dry-run
        working-directory: backend
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish to npm
        run: npm publish
        working-directory: backend
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
